construct_whenSubscribed	rx/operators.html#construct_whenSubscribed.t,untyped	operators: construct_whenSubscribed[T](mkObservable: untyped): untyped	
just	rx/operators.html#just,T	operators: just[T](v: T): IObservable[T]	
range	rx/operators.html#range,T,Natural	operators: range[T: Ordinal](start: T; count: Natural): IObservable[T]	
repeat	rx/operators.html#repeat,IObservable[T],Natural	operators: repeat[T](upstream: IObservable[T]; times: Natural = 0): IObservable[T]	
buffer	rx/operators.html#buffer,IObservable[T],Natural,Natural	operators: buffer[T](upstream: IObservable[T]; timeSpan: Natural; skip: Natural = 0): IObservable[\n    seq[T]]	
map	rx/operators.html#map,IObservable[T],	operators: map[T, S](upstream: IObservable[T]; op: (T) -&gt; S): IObservable[S]	
filter	rx/operators.html#filter,IObservable[T],	operators: filter[T](upstream: IObservable[T]; op: (T) -&gt; bool): IObservable[T]	
zip	rx/operators.html#zip,IObservable[Tl],IObservable[Tr]	operators: zip[Tl, Tr](tl: IObservable[Tl]; tr: IObservable[Tr]): IObservable[\n    tuple[l: Tl, r: Tr]]	
zip	rx/operators.html#zip,IObservable[T],varargs[IObservable[T]]	operators: zip[T](upstream: IObservable[T]; targets: varargs[IObservable[T]]): IObservable[\n    seq[T]]	
retry	rx/operators.html#retry,IObservable[T]	operators: retry[T](upstream: IObservable[T]): IObservable[T]	
concat	rx/operators.html#concat,IObservable[T],varargs[IObservable[T]]	operators: concat[T](upstream: IObservable[T]; targets: varargs[IObservable[T]]): IObservable[\n    T]	
asObservable	rx/operators.html#asObservable.t,ConnectableObservable[T]	operators: asObservable[T](self: ConnectableObservable[T]): IObservable[T]	
publish	rx/operators.html#publish,IObservable[T]	operators: publish[T](upstream: IObservable[T]): ConnectableObservable[T]	
connect	rx/operators.html#connect,ConnectableObservable[T]	operators: connect[T](self: ConnectableObservable[T]): IDisposable	
refCount	rx/operators.html#refCount,ConnectableObservable[T]	operators: refCount[T](upstream: ConnectableObservable[T]): IObservable[T]	
share	rx/operators.html#share,IObservable[T]	operators: share[T](upstream: IObservable[T]): IObservable[T]	
doThat	rx/operators.html#doThat,IObservable[T],	operators: doThat[T](upstream: IObservable[T]; op: (T) -&gt; void): IObservable[T]	
dump	rx/operators.html#dump,IObservable[T]	operators: dump[T](upstream: IObservable[T]): IObservable[T]	
