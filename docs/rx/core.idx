Observer	rx/core.html#Observer	core: Observer	
Observable	rx/core.html#Observable	core: Observable	
Disposable	rx/core.html#Disposable	core: Disposable	
toDisposable	rx/core.html#toDisposable.c,Subscription[T]	core: toDisposable[T](subscription: Subscription[T]): Disposable	
newSubscription	rx/core.html#newSubscription,Observable[T],Observer[T]	core: newSubscription[T](oble: Observable[T]; ober: Observer[T]): Subscription[T]	
newObserver	rx/core.html#newObserver	core: newObserver[T](onNext: T -&gt; void;\n               onError = default(proc (i0: ref Exception): void);\n               onComplete = default(proc (): void)): Observer[T]	
onNext	rx/core.html#onNext,Observer[T],T	core: onNext[T](observer: Observer[T]; x: T)	
onError	rx/core.html#onError,Observer[T],ref.Exception	core: onError[T](observer: Observer[T]; e: ref Exception)	
onComplete	rx/core.html#onComplete,Observer[T]	core: onComplete[T](observer: Observer[T])	
newObservable	rx/core.html#newObservable	core: newObservable[T](onSubscribe: (Observer[T]) -&gt; Disposable): Observable[T]	
subscribe	rx/core.html#subscribe,Observable[T],Observer[T]	core: subscribe[T](self: Observable[T]; observer: Observer[T]): Disposable	
subscribe	rx/core.html#subscribe.t,Observable[T],	core: subscribe[T](self: Observable[T]; onNext: T -&gt; void;\n             onError = default(proc (i0: ref Exception): void);\n             onComplete = default(proc (): void)): Disposable	
